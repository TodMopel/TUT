//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/TUT/Resources/Inputs/Player Input Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TodMopel
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ea7b9df4-64f1-4e23-9aa0-c627b1d3ad0f"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""9dbf91f9-381b-4054-9d0f-1e8ae3bbd8ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""b415291b-1275-41b9-885e-5b8095871c69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""236cc12c-616d-4e5a-8f5f-7bada22f8e72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Axis"",
                    ""id"": ""c9c283cb-7c63-4a0a-b676-96f33d9dd974"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""075cede6-3378-40f2-ba7a-8692998ba4b2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9f652cc5-cef9-4e12-8b08-a0117b340980"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""097a33d6-5677-4546-b20f-6a8106465622"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c7af7b4-8f47-4d6a-8eb3-a9eac3560182"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d08a487-3a8f-4a46-80a9-90a0f4885daf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Menu"",
            ""id"": ""163312ed-1bdd-449b-960e-33c569785477"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""be662ef3-3819-41ae-9d4d-89a5576731ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""d0e8031d-98f8-4507-82e9-430999d3fd92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e7af05b5-2061-41d4-bbbd-4943b7fc6f5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Axis"",
                    ""id"": ""7a991a8d-3485-449f-b3cc-99d011c052ef"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""92b82835-b91b-43d9-8aa7-a4cd4ff6d1dc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""81e87647-6699-491f-ae65-71fa71d737cc"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""248b3bdb-7985-4756-bbc5-1faac5dba69b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbfd5a72-5024-42fd-9dd5-568328fc7036"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66079284-216f-4cd5-a8b2-ca8095593390"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Selected"",
            ""id"": ""15e27ec9-3d2a-436e-827e-c7dd1954b820"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""e6ef6b96-7260-4b26-8f83-ccf55e508801"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""784b0dda-79be-46d7-936c-3af4fb3a6151"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""45fb98dc-c96a-4e21-8ed8-06f9b71971a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Axis"",
                    ""id"": ""360aa812-cfa8-40df-be9e-319e3fc252d0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a49ca52a-90cf-482a-b50a-cedc34241703"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0ea0410a-5120-43ec-96fe-502cd06a0c6b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c62f2e88-c9f1-424b-a7de-212a93e37d80"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c9c5c43-d614-416d-b82a-a46cd572f2c5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d766a99-2a92-48a8-bd15-8699130dd6f9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Horizontal = m_Player.FindAction("Horizontal", throwIfNotFound: true);
            m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
            m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
            // UI_Menu
            m_UI_Menu = asset.FindActionMap("UI_Menu", throwIfNotFound: true);
            m_UI_Menu_Horizontal = m_UI_Menu.FindAction("Horizontal", throwIfNotFound: true);
            m_UI_Menu_Action = m_UI_Menu.FindAction("Action", throwIfNotFound: true);
            m_UI_Menu_Pause = m_UI_Menu.FindAction("Pause", throwIfNotFound: true);
            // UI_Selected
            m_UI_Selected = asset.FindActionMap("UI_Selected", throwIfNotFound: true);
            m_UI_Selected_Horizontal = m_UI_Selected.FindAction("Horizontal", throwIfNotFound: true);
            m_UI_Selected_Action = m_UI_Selected.FindAction("Action", throwIfNotFound: true);
            m_UI_Selected_Pause = m_UI_Selected.FindAction("Pause", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Horizontal;
        private readonly InputAction m_Player_Action;
        private readonly InputAction m_Player_Pause;
        public struct PlayerActions
        {
            private @InputControls m_Wrapper;
            public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Horizontal => m_Wrapper.m_Player_Horizontal;
            public InputAction @Action => m_Wrapper.m_Player_Action;
            public InputAction @Pause => m_Wrapper.m_Player_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Horizontal.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHorizontal;
                    @Action.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                    @Action.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                    @Action.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                    @Pause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @Action.started += instance.OnAction;
                    @Action.performed += instance.OnAction;
                    @Action.canceled += instance.OnAction;
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // UI_Menu
        private readonly InputActionMap m_UI_Menu;
        private IUI_MenuActions m_UI_MenuActionsCallbackInterface;
        private readonly InputAction m_UI_Menu_Horizontal;
        private readonly InputAction m_UI_Menu_Action;
        private readonly InputAction m_UI_Menu_Pause;
        public struct UI_MenuActions
        {
            private @InputControls m_Wrapper;
            public UI_MenuActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Horizontal => m_Wrapper.m_UI_Menu_Horizontal;
            public InputAction @Action => m_Wrapper.m_UI_Menu_Action;
            public InputAction @Pause => m_Wrapper.m_UI_Menu_Pause;
            public InputActionMap Get() { return m_Wrapper.m_UI_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UI_MenuActions set) { return set.Get(); }
            public void SetCallbacks(IUI_MenuActions instance)
            {
                if (m_Wrapper.m_UI_MenuActionsCallbackInterface != null)
                {
                    @Horizontal.started -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnHorizontal;
                    @Action.started -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnAction;
                    @Action.performed -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnAction;
                    @Action.canceled -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnAction;
                    @Pause.started -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_UI_MenuActionsCallbackInterface.OnPause;
                }
                m_Wrapper.m_UI_MenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @Action.started += instance.OnAction;
                    @Action.performed += instance.OnAction;
                    @Action.canceled += instance.OnAction;
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                }
            }
        }
        public UI_MenuActions @UI_Menu => new UI_MenuActions(this);

        // UI_Selected
        private readonly InputActionMap m_UI_Selected;
        private IUI_SelectedActions m_UI_SelectedActionsCallbackInterface;
        private readonly InputAction m_UI_Selected_Horizontal;
        private readonly InputAction m_UI_Selected_Action;
        private readonly InputAction m_UI_Selected_Pause;
        public struct UI_SelectedActions
        {
            private @InputControls m_Wrapper;
            public UI_SelectedActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Horizontal => m_Wrapper.m_UI_Selected_Horizontal;
            public InputAction @Action => m_Wrapper.m_UI_Selected_Action;
            public InputAction @Pause => m_Wrapper.m_UI_Selected_Pause;
            public InputActionMap Get() { return m_Wrapper.m_UI_Selected; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UI_SelectedActions set) { return set.Get(); }
            public void SetCallbacks(IUI_SelectedActions instance)
            {
                if (m_Wrapper.m_UI_SelectedActionsCallbackInterface != null)
                {
                    @Horizontal.started -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnHorizontal;
                    @Action.started -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnAction;
                    @Action.performed -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnAction;
                    @Action.canceled -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnAction;
                    @Pause.started -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_UI_SelectedActionsCallbackInterface.OnPause;
                }
                m_Wrapper.m_UI_SelectedActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @Action.started += instance.OnAction;
                    @Action.performed += instance.OnAction;
                    @Action.canceled += instance.OnAction;
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                }
            }
        }
        public UI_SelectedActions @UI_Selected => new UI_SelectedActions(this);
        public interface IPlayerActions
        {
            void OnHorizontal(InputAction.CallbackContext context);
            void OnAction(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IUI_MenuActions
        {
            void OnHorizontal(InputAction.CallbackContext context);
            void OnAction(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IUI_SelectedActions
        {
            void OnHorizontal(InputAction.CallbackContext context);
            void OnAction(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
    }
}
